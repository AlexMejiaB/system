generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.sqlite"
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pyrollNmber Int   @unique
}

model Employee {
  id              Int             @id @default(autoincrement())
  employeeId      String          @unique
  name            String
  payrollNumber   Int             @unique
  email           String?         @unique
  phone           String?
  hireDate        DateTime
  dailySalary     Float
  monthlySalary   Float?          // For Mexican labor law calculations
  shift           String?
  transportType   String?
  collarType      CollarType
  isActive        Boolean         @default(true)
  plantId         Int
  departmentId    Int
  positionId      Int?
  
  // Mexican Labor Law Fields
  rfc             String?         // Registro Federal de Contribuyentes
  curp            String?         // Clave Única de Registro de Población
  nss             String?         // Número de Seguridad Social
  bankAccount     String?         // Bank account for deposits
  emergencyContact String?        // Emergency contact information
  
  // Relations
  plant       Plant       @relation(fields: [plantId], references: [id])
  department  Department  @relation(fields: [departmentId], references: [id])
  position    Position?   @relation(fields: [positionId], references: [id])
  timeEntries TimeEntry[]
  payrollEntries PayrollEntry[]
  onboardingTasks OnboardingTask[]
  documents   Document[]
  incidents   Incident[]
  laborCalculations LaborCalculation[]
  profile     EmployeeProfile?
  
  // New Enterprise HR Relations
  performanceReviews PerformanceReview[]
  reviewsAsReviewer PerformanceReview[] @relation("ReviewerReviews")
  benefitEnrollments BenefitEnrollment[]
  trainingEnrollments TrainingEnrollment[]
  timeOffRequests TimeOffRequest[]
  approvedTimeOff TimeOffRequest[] @relation("ApprovedTimeOff")
  timeOffBalances TimeOffBalance[]
  salaryHistory SalaryHistory[]
  approvedSalaryChanges SalaryHistory[] @relation("ApprovedSalaryChanges")
  bonuses Bonus[]
  approvedBonuses Bonus[] @relation("ApprovedBonuses")
  surveyResponses SurveyResponse[]
  assetAssignments AssetAssignment[]
  organizationChart OrganizationChart?
  managerReports OrganizationChart[] @relation("ManagerReports")
  recognitions Recognition[]
  nominatedRecognitions Recognition[] @relation("NominatedRecognitions")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  description String?
  departmentId Int
  baseSalary  Float
  isActive    Boolean    @default(true)
  
  // Relations
  department  Department @relation(fields: [departmentId], references: [id])
  employees   Employee[]
  applicants  Applicant[]
  onboardingTemplates OnboardingTemplate[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Applicant {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  phone           String
  positionId      Int
  status          ApplicationStatus @default(PENDING)
  experience      Int      @default(0)
  education       String
  applicationDate DateTime
  resume          String?
  notes           String?
  
  // Relations
  position        Position @relation(fields: [positionId], references: [id])
  onboardingTasks OnboardingTask[]
  interviews      Interview[]
  documents       Document[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// HR Module Models
model OnboardingTask {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    OnboardingCategory
  isRequired  Boolean  @default(true)
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  assignedTo  String?  // Email or user ID
  applicantId Int?
  employeeId  Int?
  
  // Relations
  applicant   Applicant? @relation(fields: [applicantId], references: [id])
  employee    Employee?  @relation(fields: [employeeId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Interview {
  id          Int      @id @default(autoincrement())
  applicantId Int
  interviewerName String
  interviewerEmail String
  scheduledDate DateTime
  duration    Int      @default(60) // minutes
  type        InterviewType
  status      InterviewStatus @default(SCHEDULED)
  location    String?
  meetingLink String?
  notes       String?
  feedback    String?
  rating      Int?     // 1-5 scale
  
  // Relations
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OnboardingTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  positionId  Int?
  isActive    Boolean  @default(true)
  tasks       OnboardingTemplateTask[]
  
  // Relations
  position    Position? @relation(fields: [positionId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OnboardingTemplateTask {
  id          Int      @id @default(autoincrement())
  templateId  Int
  title       String
  description String?
  category    OnboardingCategory
  isRequired  Boolean  @default(true)
  dayOffset   Int      @default(0) // Days after start date
  assignedTo  String?
  
  // Relations
  template    OnboardingTemplate @relation(fields: [templateId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id          Int      @id @default(autoincrement())
  name        String
  type        DocumentType
  filePath    String?
  fileUrl     String?
  isRequired  Boolean  @default(false)
  applicantId Int?
  employeeId  Int?
  uploadedBy  String?
  
  // Relations
  applicant   Applicant? @relation(fields: [applicantId], references: [id])
  employee    Employee?  @relation(fields: [employeeId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plant {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
  positions Position[]
}

// Time tracking models
model TimeEntry {
  id         Int      @id @default(autoincrement())
  employeeId Int
  date       DateTime
  clockIn    DateTime?
  clockOut   DateTime?
  hoursWorked Float?
  overtime   Float?
  notes      String?
  
  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([employeeId, date])
}

// Payroll models
model PayrollPeriod {
  id         Int      @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  status     PayrollStatus @default(DRAFT)
  
  // Relations
  entries    PayrollEntry[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PayrollEntry {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  payrollPeriodId Int
  regularHours    Float
  overtimeHours   Float
  regularPay      Float
  overtimePay     Float
  grossPay        Float
  deductions      Float
  netPay          Float
  
  // Relations
  employee        Employee      @relation(fields: [employeeId], references: [id])
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([employeeId, payrollPeriodId])
}

model Deduction {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        DeductionType
  amount      Float?
  percentage  Float?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum CollarType {
  BLUE
  WHITE
  GRAY
}

enum Role {
  ADMIN
  MANAGER
  HR
  PAYROLL
  USER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayrollStatus {
  DRAFT
  PROCESSING
  COMPLETED
  PAID
}

enum DeductionType {
  FIXED
  PERCENTAGE
  TAX
  INSURANCE
  RETIREMENT
}

enum OnboardingCategory {
  DOCUMENTATION
  TRAINING
  EQUIPMENT
  SYSTEM_ACCESS
  ORIENTATION
  COMPLIANCE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  TECHNICAL
  BEHAVIORAL
  PANEL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum DocumentType {
  RESUME
  COVER_LETTER
  ID_DOCUMENT
  DIPLOMA
  CERTIFICATE
  CONTRACT
  TAX_FORM
  BANK_INFO
  EMERGENCY_CONTACT
  PHOTO
  OTHER
}

// New Models for Enhanced Functionality

// Incident Form Model
model Incident {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  incidentType    IncidentType
  startDate       DateTime
  endDate         DateTime?
  reason          String
  description     String?
  status          IncidentStatus @default(PENDING)
  approvedBy      String?  // HR or Manager who approved
  approvalDate    DateTime?
  rejectionReason String?
  isPaid          Boolean  @default(false) // false for "sin goce de sueldo"
  
  // Relations
  employee        Employee @relation(fields: [employeeId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Mexican Labor Law Calculations
model LaborCalculation {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  year            Int
  
  // Aguinaldo (Christmas Bonus) - Minimum 15 days
  aguinaldoDays   Float    @default(15)
  aguinaldoAmount Float
  
  // Vacaciones (Vacation) - Based on years of service
  vacationDays    Float
  vacationAmount  Float
  vacationBonus   Float    // 25% bonus on vacation pay
  
  // Fondo de Ahorro (Savings Fund) - 10% equivalent (not deducted)
  savingsFundAmount Float
  
  // Prima Vacacional (Vacation Bonus) - 25% of vacation pay
  vacationPremium Float
  
  // IMSS, INFONAVIT calculations
  imssEmployee    Float    // Employee contribution
  imssEmployer    Float    // Employer contribution
  infonavit       Float    // Housing fund
  
  // Relations
  employee        Employee @relation(fields: [employeeId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([employeeId, year])
}

// Employee Role and Profile Enhancement
model EmployeeRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  permissions String   // JSON string of permissions
  isActive    Boolean  @default(true)
  
  // Relations
  profiles    EmployeeProfile[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmployeeProfile {
  id              Int      @id @default(autoincrement())
  employeeId      Int      @unique
  roleId          Int?
  
  // Personal Information
  firstName       String
  lastName        String
  middleName      String?
  birthDate       DateTime?
  gender          Gender?
  maritalStatus   MaritalStatus?
  nationality     String?
  
  // Address Information
  street          String?
  city            String?
  state           String?
  postalCode      String?
  country         String   @default("México")
  
  // Contact Information
  personalEmail   String?
  homePhone       String?
  mobilePhone     String?
  
  // Employment Details
  contractType    ContractType?
  workSchedule    String?
  supervisor      String?
  
  // Relations
  employee        Employee @relation(fields: [employeeId], references: [id])
  role            EmployeeRole? @relation(fields: [roleId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Report Generation Model
model Report {
  id          Int      @id @default(autoincrement())
  name        String
  type        ReportType
  period      ReportPeriod
  startWeek   Int      // Week 1-52
  endWeek     Int      // Week 1-52
  year        Int
  filePath    String?
  fileUrl     String?
  generatedBy String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New Enums
enum IncidentType {
  LEAVE_WITHOUT_PAY
  MEDICAL_LEAVE
  PERSONAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  VACATION_REQUEST
  SICK_LEAVE
  EMERGENCY_LEAVE
}

enum IncidentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

enum ContractType {
  PERMANENT
  TEMPORARY
  CONTRACTOR
  INTERN
  PART_TIME
}

enum ReportType {
  PAYROLL
  ATTENDANCE
  LABOR_CALCULATIONS
  INCIDENTS
  COMPREHENSIVE
}

enum ReportPeriod {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
}


// Performance Management Models
model PerformanceReview {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  reviewerId      Int
  reviewPeriod    String                 // e.g., "Q1 2024", "Annual 2024"
  startDate       DateTime
  endDate         DateTime
  status          PerformanceStatus      @default(DRAFT)
  overallRating   Float?                 // 1-5 scale
  goals           String?                // JSON string of goals
  achievements    String?                // JSON string of achievements
  areasForImprovement String?
  managerComments String?
  employeeComments String?
  hrComments      String?
  nextReviewDate  DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  reviewer        Employee               @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  goals_relation  PerformanceGoal[]
  competencies    PerformanceCompetency[]
}

model PerformanceGoal {
  id              Int                    @id @default(autoincrement())
  reviewId        Int
  title           String
  description     String?
  targetDate      DateTime?
  status          GoalStatus             @default(NOT_STARTED)
  progress        Int                    @default(0) // 0-100%
  weight          Float                  @default(1.0) // Goal weight in review
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  review          PerformanceReview      @relation(fields: [reviewId], references: [id])
}

model PerformanceCompetency {
  id              Int                    @id @default(autoincrement())
  reviewId        Int
  competencyName  String
  rating          Float                  // 1-5 scale
  comments        String?
  createdAt       DateTime               @default(now())
  
  review          PerformanceReview      @relation(fields: [reviewId], references: [id])
}

// Benefits Management Models
model BenefitPlan {
  id              Int                    @id @default(autoincrement())
  name            String
  description     String?
  type            BenefitType
  provider        String?
  cost            Float?
  employeeCost    Float?                 // Employee contribution
  isActive        Boolean                @default(true)
  eligibilityRules String?              // JSON string of eligibility rules
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  enrollments     BenefitEnrollment[]
}

model BenefitEnrollment {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  benefitPlanId   Int
  enrollmentDate  DateTime
  effectiveDate   DateTime
  endDate         DateTime?
  status          EnrollmentStatus       @default(ACTIVE)
  dependents      String?                // JSON string of dependents
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  benefitPlan     BenefitPlan            @relation(fields: [benefitPlanId], references: [id])
}

// Training and Development Models
model TrainingProgram {
  id              Int                    @id @default(autoincrement())
  title           String
  description     String?
  type            TrainingType
  duration        Int?                   // Duration in hours
  provider        String?
  cost            Float?
  maxParticipants Int?
  isActive        Boolean                @default(true)
  requirements    String?                // Prerequisites
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  sessions        TrainingSession[]
  enrollments     TrainingEnrollment[]
}

model TrainingSession {
  id              Int                    @id @default(autoincrement())
  programId       Int
  title           String
  startDate       DateTime
  endDate         DateTime
  location        String?
  instructor      String?
  maxParticipants Int?
  status          SessionStatus          @default(SCHEDULED)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  program         TrainingProgram        @relation(fields: [programId], references: [id])
  enrollments     TrainingEnrollment[]
}

model TrainingEnrollment {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  programId       Int
  sessionId       Int?
  enrollmentDate  DateTime
  completionDate  DateTime?
  status          TrainingStatus         @default(ENROLLED)
  score           Float?                 // Test score if applicable
  certificateUrl  String?
  feedback        String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  program         TrainingProgram        @relation(fields: [programId], references: [id])
  session         TrainingSession?       @relation(fields: [sessionId], references: [id])
}

// Employee Self-Service Models
model TimeOffRequest {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  type            TimeOffType
  startDate       DateTime
  endDate         DateTime
  days            Float                  // Number of days requested
  reason          String?
  status          RequestStatus          @default(PENDING)
  approvedBy      Int?
  approvalDate    DateTime?
  rejectionReason String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  approver        Employee?              @relation("ApprovedTimeOff", fields: [approvedBy], references: [id])
}

model TimeOffBalance {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  type            TimeOffType
  year            Int
  allocated       Float                  // Days allocated for the year
  used            Float                  @default(0) // Days used
  pending         Float                  @default(0) // Days pending approval
  carryOver       Float                  @default(0) // Days carried over from previous year
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  
  @@unique([employeeId, type, year])
}

// Compensation Management Models
model SalaryHistory {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  previousSalary  Float
  newSalary       Float
  changeType      SalaryChangeType
  reason          String?
  effectiveDate   DateTime
  approvedBy      Int?
  createdAt       DateTime               @default(now())
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  approver        Employee?              @relation("ApprovedSalaryChanges", fields: [approvedBy], references: [id])
}

model Bonus {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  type            BonusType
  amount          Float
  reason          String?
  payPeriod       String                 // When it will be paid
  status          BonusStatus            @default(PENDING)
  approvedBy      Int?
  approvalDate    DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  approver        Employee?              @relation("ApprovedBonuses", fields: [approvedBy], references: [id])
}

// Employee Engagement Models
model Survey {
  id              Int                    @id @default(autoincrement())
  title           String
  description     String?
  type            SurveyType
  startDate       DateTime
  endDate         DateTime
  isAnonymous     Boolean                @default(true)
  isActive        Boolean                @default(true)
  questions       String                 // JSON string of questions
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  responses       SurveyResponse[]
}

model SurveyResponse {
  id              Int                    @id @default(autoincrement())
  surveyId        Int
  employeeId      Int?                   // Null if anonymous
  responses       String                 // JSON string of responses
  completedAt     DateTime               @default(now())
  
  survey          Survey                 @relation(fields: [surveyId], references: [id])
  employee        Employee?              @relation(fields: [employeeId], references: [id])
}

// Asset Management Models
model Asset {
  id              Int                    @id @default(autoincrement())
  name            String
  type            AssetType
  serialNumber    String?
  model           String?
  brand           String?
  purchaseDate    DateTime?
  purchasePrice   Float?
  warrantyExpiry  DateTime?
  status          AssetStatus            @default(AVAILABLE)
  location        String?
  notes           String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  assignments     AssetAssignment[]
}

model AssetAssignment {
  id              Int                    @id @default(autoincrement())
  assetId         Int
  employeeId      Int
  assignedDate    DateTime
  returnDate      DateTime?
  condition       String?
  notes           String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  asset           Asset                  @relation(fields: [assetId], references: [id])
  employee        Employee               @relation(fields: [employeeId], references: [id])
}

// Organizational Chart Models
model OrganizationChart {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  managerId       Int?
  level           Int                    @default(1)
  isManager       Boolean                @default(false)
  directReports   Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  manager         Employee?              @relation("ManagerReports", fields: [managerId], references: [id])
  
  @@unique([employeeId])
}

// Employee Recognition Models
model Recognition {
  id              Int                    @id @default(autoincrement())
  employeeId      Int
  nominatedBy     Int
  type            RecognitionType
  title           String
  description     String?
  points          Int?                   // Points awarded
  isPublic        Boolean                @default(true)
  createdAt       DateTime               @default(now())
  
  employee        Employee               @relation(fields: [employeeId], references: [id])
  nominator       Employee               @relation("NominatedRecognitions", fields: [nominatedBy], references: [id])
}

// New Enterprise HR Enums
enum PerformanceStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BenefitType {
  HEALTH_INSURANCE
  DENTAL_INSURANCE
  VISION_INSURANCE
  LIFE_INSURANCE
  RETIREMENT_401K
  FLEXIBLE_SPENDING
  HEALTH_SAVINGS
  DISABILITY_INSURANCE
  PAID_TIME_OFF
  OTHER
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  PENDING
  CANCELLED
}

enum TrainingType {
  ONBOARDING
  COMPLIANCE
  TECHNICAL
  LEADERSHIP
  SOFT_SKILLS
  SAFETY
  CERTIFICATION
  OTHER
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TrainingStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum TimeOffType {
  VACATION
  SICK_LEAVE
  PERSONAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  BEREAVEMENT
  JURY_DUTY
  MILITARY_LEAVE
  UNPAID_LEAVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum SalaryChangeType {
  PROMOTION
  MERIT_INCREASE
  MARKET_ADJUSTMENT
  COST_OF_LIVING
  DEMOTION
  OTHER
}

enum BonusType {
  PERFORMANCE
  RETENTION
  SIGNING
  REFERRAL
  HOLIDAY
  PROJECT_COMPLETION
  OTHER
}

enum BonusStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum SurveyType {
  ENGAGEMENT
  EXIT
  PULSE
  FEEDBACK_360
  ONBOARDING
  TRAINING_EVALUATION
  OTHER
}

enum AssetType {
  LAPTOP
  DESKTOP
  MONITOR
  PHONE
  TABLET
  PRINTER
  FURNITURE
  VEHICLE
  SOFTWARE_LICENSE
  OTHER
}

enum AssetStatus {
  AVAILABLE
  ASSIGNED
  IN_REPAIR
  RETIRED
  LOST
}

enum RecognitionType {
  EMPLOYEE_OF_MONTH
  PEER_RECOGNITION
  ACHIEVEMENT_AWARD
  YEARS_OF_SERVICE
  INNOVATION_AWARD
  CUSTOMER_SERVICE
  TEAMWORK
  OTHER
}

